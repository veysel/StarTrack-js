{"version":3,"sources":["components/GitHubAuthBtn.js","utils/GitHubUtils.js","components/GitHubAuthForm.js","components/GitHubAuthContainer.js","components/TopNav.js","components/RepoDetails.js","components/ChartContainer.js","components/StatsTable.js","components/UrlDisplay.js","shared/ClosableBadge.js","components/Footer.js","utils/StargazerStats.js","utils/StargazerLoader.js","components/MainContainer.js","components/MainPage.js","components/RepoPreloader.js","components/App.js","serviceWorker.js","index.js"],"names":["GitHubAuthBtn","token","this","props","accessToken","undefined","substring","Button","variant","onClick","onLoginClick","OverlayTrigger","placement","delay","show","overlay","Tooltip","storageType","Navbar","Text","className","getAccessTokenShortForm","onLogoutClick","React","Component","storageKey","StorageTypes","GitHubUtils","axios","get","_prepareRequestHeaders","_setStorageType","setItem","console","log","_getStorage","removeItem","ms","Promise","resolve","setTimeout","user","repo","handleProgress","shouldStop","starData","starCount","numOfPages","pageNum","url","replace","getAccessToken","page","_getLastStargazerPage","headers","isLoggedIn","Error","i","data","length","push","x","starred_at","y","response","status","message","getItem","sessionStorage","localStorage","_storage","removeAccessToken","linkHeader","parts","split","section","trim","_getStorageDefault","gitHubUtils","Object","freeze","GitHubAuthForm","state","tokenValid","handleLoginClick","event","preventDefault","validateAndStoreAccessToken","inputToken","current","value","getStorageTypeDecision","then","setState","handleLoginSuccess","catch","createRef","storageTypeCheckbox","checked","handleClose","Modal","onHide","handleCloseClick","bind","Form","onSubmit","Header","closeButton","Title","Body","target","rel","href","Group","controlId","Label","Control","ref","type","placeholder","isInvalid","required","Feedback","Check","inline","id","label","Footer","GitHubAuthContainer","showGitHubAuthForm","getStorageType","openGitHubAuthForm","hideGitHubAuthForm","handleLogOut","TopNav","bg","Brand","alt","src","window","location","pathname","width","height","packageJson","version","Nav","Link","icon","faGithub","RepoDetails","repoName","userName","onRepoDetails","charCode","loadInProgress","onGoClick","Container","Row","InputGroup","Prepend","FormControl","aria-label","onKeyPress","handleKeyPress","disabled","Spinner","as","animation","size","role","aria-hidden","onStopClick","faStopCircle","ChartContainer","repos","chartSeries","map","repoData","name","username","stargazerData","chartOptions","chart","zoom","autoScaleYaxis","xaxis","tooltip","format","colors","color","options","series","StatsTable","Table","bordered","responsive","hover","keys","stats","statName","style","backgroundColor","values","statData","baseUrl","origin","UrlDisplay","urlInput","repoDetails","join","select","document","execCommand","buildURL","readOnly","Append","copyToClipboard","faCopy","ClosableBadge","onBadgeClose","badgeCookieData","Badge","pill","text","handleBadgeClose","borderColor","faTimesCircle","footerPosition","pageEmpty","sticky","data-size","data-icon","data-show-count","faTwitter","faEnvelope","months","stargazerStats","firstStarDate","Date","lastStarDate","numOfDays","Math","floor","daysWithoutStars","maxStarsPerDay","dayWithMostStars","curSameDays","startDate","prevDate","forEach","xyData","curDate","toFixed","_formatDate","date","getDate","getMonth","getFullYear","StargazerLoader","loadStargazers","colorIndex","calcStats","stargazerLoader","MainContainer","preloadedRepos","alert","title","loading","isLoading","loadProgress","stopLoading","showAlert","find","repoIter","onLoadInProgress","prevState","progress","filter","ProgressBar","now","animated","getRepoStargazers","handleStopLoading","handleRemoveRepo","closeAlert","MainPage","RepoPreloader","reposToPreload","parseUrlParams","currentlyLoadingIndex","finishedLoading","reposLoaded","errors","searchParams","URLSearchParams","search","result","key","iter","getCurrentlyLoadingRepoDetails","handleLoadProgress","getSecondaryHeaderMessage","getProgressBarVariant","error","handleButtonClick","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2480f6e.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Navbar, OverlayTrigger, Tooltip } from 'react-bootstrap/'\n\nclass GitHubAuthBtn extends React.Component {\n\n  getAccessTokenShortForm() {\n    let token = this.props.accessToken;\n    if (token !== null && token !== undefined)\n      return token.substring(0, 6);\n    \n    return \"\"\n  }\n\n  render() {\n    if (this.props.accessToken === null || this.props.accessToken === undefined || this.props.accessToken === \"\") {\n      return (\n        <Button variant=\"outline-light\" onClick={this.props.onLoginClick}>GitHub Authentication</Button>\n      )\n    }\n    else {\n      return (\n        <div>\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 250 }}\n            overlay={<Tooltip>Access token stored in {this.props.storageType}</Tooltip>}\n          >\n            <Navbar.Text className=\"mr-2 ml-2\">{`Signed in as: '${this.getAccessTokenShortForm()}'`}</Navbar.Text>\n          </OverlayTrigger>\n          <Button variant=\"outline-light\" onClick={this.props.onLogoutClick}>Log Out</Button>\n        </div>\n      )\n    }\n  }\n}\n\nexport default GitHubAuthBtn","import axios from 'axios'\n\nconst stargazersURL = \"https://api.github.com/repos/{user}/{repo}/stargazers?per_page=100&page={page}\"\nconst validateAccessTokenURL = \"https://api.github.com/user\"\n\nconst storageKey = \"statrack_js_access_token\"\n\nconst maxSupportedPagesWithoutAccessToken = 30\n\nexport const StorageTypes = {\n  LocalStorage: 'local storage',\n  SessionStorage: 'session storage'\n}\n\nclass GitHubUtils {\n\n  static _getStorageDefault() {\n    if (sessionStorage.getItem(storageKey) !== null && sessionStorage.getItem(storageKey) !== undefined && sessionStorage.getItem(storageKey) !== \"\") {\n      return sessionStorage\n    }\n    else if (localStorage.getItem(storageKey) !== null && localStorage.getItem(storageKey) !== undefined && localStorage.getItem(storageKey) !== \"\") {\n      return localStorage\n    }\n    else {\n      return sessionStorage\n    }\n  }\n\n  static _storage = GitHubUtils._getStorageDefault();\n\n  async validateAndStoreAccessToken(accessToken, storageType) {\n    try {\n      await axios.get(validateAccessTokenURL, this._prepareRequestHeaders(accessToken));\n      this._setStorageType(storageType).setItem(storageKey, accessToken);\n    }\n    catch (error) {\n      console.log(error)\n      throw error;\n    }\n  }\n\n  removeAccessToken() {\n    this._getStorage().removeItem(storageKey)\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async loadStargazers(user, repo, handleProgress, shouldStop) {\n    try {\n      let starData = [];\n      let starCount = 1;\n      let numOfPages = 1;\n      let pageNum = 1;\n      handleProgress(0);\n      while (pageNum <= numOfPages) {\n        if (shouldStop()) {\n          return null;\n        }\n        let url = stargazersURL.replace('{page}', pageNum).replace('{user}', user).replace('{repo}', repo);\n        let page = await axios.get(url, this._prepareRequestHeaders(this.getAccessToken()));\n        if (pageNum === 1) {\n          numOfPages = this._getLastStargazerPage(page.headers['link']);\n          if (numOfPages > maxSupportedPagesWithoutAccessToken && !this.isLoggedIn()) {\n            throw Error(\"Cannot load a repo with more than \" + 100 * maxSupportedPagesWithoutAccessToken + \" stars without GitHub access token. Please click \\\"GitHub Authentication\\\" and provide one\")\n          }\n        }\n        handleProgress((pageNum/numOfPages)*100);\n        pageNum++;\n\n        for (let i = 0; i < page.data.length; i++) {\n          starData.push({\n            x: page.data[i].starred_at,\n            y: starCount++\n          })\n        }\n      }\n\n      return starData;\n    }\n    catch(error) {\n      if (error.response === undefined) {\n        throw error\n      }\n      if (error.response.status === 404) {\n        throw Error(\"Repo \" + user + \"/\" + repo + \" Not found\")\n      } else if (error.response.status === 403) {\n        throw Error(\"API rate limit exceeded!\" + (this.isLoggedIn() ? \"\" : \" Please click \\\"GitHub Authentication\\\" and provide GitHub access token to increase rate limit\"));\n      } else {\n        throw Error(\"Couldn't fetch stargazers data, error code \" + error.response.status + \" returned\" + \n          (error.response.data.message && error.response.data.message !== \"\" ? \": \" + error.response.data.message : \"\"))\n      }\n    }\n  }\n\n  getAccessToken() {\n    return this._getStorage().getItem(storageKey);\n  }\n\n  isLoggedIn() {\n    let accessToken = this.getAccessToken();\n    return (accessToken !== null && accessToken !== undefined && accessToken !== \"\");\n  }\n\n  getStorageType() {\n    switch (this._getStorage()) {\n      case sessionStorage:\n        return StorageTypes.SessionStorage;\n      case localStorage:\n        return StorageTypes.LocalStorage;\n      default:\n        return null;\n    }\n  }\n\n  _getStorage() {\n    return GitHubUtils._storage\n  }\n\n  _setStorageType(storageType) {\n    this.removeAccessToken();\n\n    switch (storageType) {\n      case StorageTypes.LocalStorage:\n        GitHubUtils._storage = localStorage;\n        break;\n      case StorageTypes.SessionStorage:\n        GitHubUtils._storage = sessionStorage\n        break;\n      default:\n        GitHubUtils._storage = sessionStorage\n    }\n\n    return GitHubUtils._storage\n  }\n\n  _prepareRequestHeaders(accessToken) {\n    return {\n      headers: {\n        'Accept': 'application/vnd.github.v3.star+json',\n        ...accessToken !== undefined && accessToken !== null && accessToken !== \"\" && {'Authorization': 'token ' + accessToken},\n      }\n    };\n\n  }\n\n  _getLastStargazerPage(linkHeader) {\n    if (linkHeader === undefined || linkHeader.length === 0) {\n      return 1;\n    }\n  \n    // Split parts by comma\n    var parts = linkHeader.split(',');\n  \n    // Parse each part into a named link\n    for (let i in parts) {\n      var section = parts[i].split(';');\n      if (section.length !== 2) {\n        continue;\n      }\n  \n      var url = section[0].replace(/<(.*)>/, '$1').trim();\n      var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n  \n      // if name is 'last' then extract page and return it\n      if (name === 'last') {\n        return url.replace(/(.*)&page=(.*)/, '$2').trim();\n      }\n    }\n  }\n\n}\n\nconst gitHubUtils = new GitHubUtils();\nObject.freeze(gitHubUtils);\n\nexport default gitHubUtils;","import React from 'react'\nimport { Modal, Button, Form } from 'react-bootstrap/'\nimport gitHubUtils, { StorageTypes } from '../utils/GitHubUtils'\n\nclass GitHubAuthForm extends React.Component {\n\n  state = {\n    tokenValid: true\n  }\n\n  constructor(props) {\n    super(props);\n    this.inputToken = React.createRef();\n    this.storageTypeCheckbox = React.createRef();\n  }\n\n  handleLoginClick = event => {\n    event.preventDefault();\n\n    gitHubUtils.validateAndStoreAccessToken(this.inputToken.current.value, this.getStorageTypeDecision())\n    .then( () => {\n      this.setState({\n        tokenValid: true\n      }, () => {\n        this.props.handleLoginSuccess();\n      })\n    })\n    .catch(() => {\n      this.setState({\n        tokenValid: false\n      })      \n    })\n  }\n\n  getStorageTypeDecision() {\n    if (this.storageTypeCheckbox.checked) {\n      return StorageTypes.LocalStorage\n    }\n\n    return StorageTypes.SessionStorage\n  }\n\n  handleCloseClick() {\n    this.setState({\n      tokenValid: true\n    }, () => {\n      this.props.handleClose();\n    })\n  }\n\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.handleCloseClick.bind(this)}>\n        <Form onSubmit={this.handleLoginClick}>\n          <Modal.Header closeButton>\n            <Modal.Title>GitHub Authentication</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>GitHub API <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developer.github.com/v3/#rate-limiting\">rate limiter</a> makes it \n              impossible to collect stargazer data on repos with more than 3000 stars without GitHub authentication.\n            </p>\n            <p>If you'd like to view stargazer data for this repo, please provide your GitHub auth details.</p>\n            <p>Please note these credentials aren't stored in any server. This application is based on pure javascript \n              so the credentials are only used to send authenticated requests to GitHub API.\n            </p>\n            <Form.Group controlId=\"githubAuthenticationForm\">\n              <Form.Label>GitHub access token (generate one <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/settings/tokens\">here</a>)</Form.Label>\n              <Form.Control ref={this.inputToken} type=\"text\" placeholder=\"fc516773214acf13d10f856c6b80037999da4fd3\" isInvalid={!this.state.tokenValid} required/>\n              <Form.Control.Feedback type=\"invalid\">\n                Access token is invalid.\n              </Form.Control.Feedback>\n              <Form.Text className=\"text-muted\">\n                These credentials aren't stored in any server.\n              </Form.Text>\n              <Form.Check ref={ref => this.storageTypeCheckbox = ref} inline type=\"checkbox\" id=\"storageType\" label=\"Save access token in local storage\" />\n              <Form.Label><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://stackoverflow.com/questions/5523140/html5-local-storage-vs-session-storage\">Learn more</a></Form.Label>\n            </Form.Group>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleCloseClick.bind(this)}>\n              Close\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Login\n            </Button>\n          </Modal.Footer>\n          </Form>\n      </Modal>    \n    )\n  }\n}\n\nexport default GitHubAuthForm","import React from 'react'\nimport GitHubAuthBtn from './GitHubAuthBtn'\nimport GitHubAuthForm from './GitHubAuthForm'\nimport gitHubUtils from '../utils/GitHubUtils'\n\nclass GitHubAuthContainer extends React.Component {\n\n  state = {\n    showGitHubAuthForm: false,\n    accessToken: gitHubUtils.getAccessToken(),\n    storageType: gitHubUtils.getStorageType()\n  }\n\n  static storageTypeTo\n\n  openGitHubAuthForm = () => {\n    this.setState({\n      showGitHubAuthForm: true\n    })\n  }\n\n  hideGitHubAuthForm = () => {\n    this.setState({\n      showGitHubAuthForm: false,\n      accessToken: gitHubUtils.getAccessToken(),\n      storageType: gitHubUtils.getStorageType()\n    })\n  }\n\n  handleLoginSuccess = () => {\n    this.setState({\n      showGitHubAuthForm: false,\n      accessToken: gitHubUtils.getAccessToken(),\n      storageType: gitHubUtils.getStorageType()\n    })\n  }\n\n  handleLogOut = () => {\n    gitHubUtils.removeAccessToken();\n    this.setState({\n      accessToken: gitHubUtils.getAccessToken(),\n      storageType: gitHubUtils.getStorageType()\n    })\n  }  \n\n  render() {\n    return (\n      <div>\n        <GitHubAuthBtn onLoginClick={this.openGitHubAuthForm} onLogoutClick={this.handleLogOut} accessToken={this.state.accessToken} storageType={this.state.storageType}/>\n        <GitHubAuthForm show={this.state.showGitHubAuthForm} handleClose={this.hideGitHubAuthForm} handleLoginSuccess={this.handleLoginSuccess}/>\n      </div>\n    )\n  }\n}\n\nexport default GitHubAuthContainer","import React from 'react'\nimport { Nav, Navbar } from 'react-bootstrap/'\nimport GitHubAuthContainer from './GitHubAuthContainer'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport packageJson from '../../package.json'\n\nconst starTrackGitHubRepo = \"https://github.com/seladb/startrack-js\"\n\nclass TopNav extends React.Component {\n  \n  render() {\n    return (\n      <Navbar bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"#/\">\n          <img\n            alt=\"\"\n            src={window.location.pathname + \"star-icon.png\"}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />{' '}\n          StarTrack v{packageJson.version}\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\"/>\n        <Nav>\n          <Nav.Link href={starTrackGitHubRepo} target=\"_blank\" rel=\"noopener noreferrer\">\n            <FontAwesomeIcon icon={faGithub} className=\"mr-1\"/>\n             Project On GitHub\n          </Nav.Link>\n        </Nav>\n        <GitHubAuthContainer />\n      </Navbar>\n    )\n  }\n}\n\nexport default TopNav;","import React from 'react'\nimport './RepoDetails.css'\nimport { Container, Row, InputGroup, FormControl, Button, Spinner } from 'react-bootstrap/'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStopCircle } from '@fortawesome/free-solid-svg-icons';\n\nclass RepoDetails extends React.Component {\n\n  constructor() {\n    super();\n    this.repoName = React.createRef();\n    this.userName = React.createRef();\n  }\n\n  onGoClick() {\n    this.props.onRepoDetails(this.userName.current.value, this.repoName.current.value)\n  }\n\n  handleKeyPress(target) {\n    if(target.charCode === 13 && !this.props.loadInProgress){\n      this.onGoClick();\n    } \n  }\n\n  render() {\n    return (\n      <Container className=\"RepoDetails-container\">\n        <Row>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>Repo Details</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              ref={this.userName}\n              placeholder=\"Username\"\n              aria-label=\"Username\"\n              onKeyPress={this.handleKeyPress.bind(this)}\n            />\n            <InputGroup.Prepend>\n              <InputGroup.Text>/</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              ref={this.repoName}\n              placeholder=\"Repo name\"\n              aria-label=\"Repo name\"\n              onKeyPress={this.handleKeyPress.bind(this)}\n            />\n            { !this.props.loadInProgress ?\n            <Button\n              className=\"RepoDetails-goButton\"\n              type=\"button\" \n              onClick={this.onGoClick.bind(this)}>Go!\n            </Button>\n            :\n            <div>\n              <Button \n                className=\"RepoDetails-loadingButton\"\n                type=\"button\" \n                disabled>\n                  <Spinner\n                    as=\"span\"\n                    animation=\"border\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                /> Loading...\n              </Button>\n              <Button className=\"RepoDetails-stopButton\" onClick={this.props.onStopClick}>\n                <FontAwesomeIcon icon={faStopCircle} />\n              </Button>\n             </div>\n            }\n          </InputGroup>\n        </Row>\n      </Container>\n    )\n  }\n  \n}\n\nexport default RepoDetails","import React from 'react'\nimport { Container } from 'react-bootstrap/'\nimport ReactApexChart from 'react-apexcharts'\n\nclass ChartContainer extends React.Component {\n\n  render() {\n    const repos = this.props.repos;\n    let chartSeries = repos.map( (repoData) => {\n      return {\n        name: repoData.username + \"/\" + repoData.repo,\n        data: repoData.stargazerData\n      }\n    })\n\n    let chartOptions = {\n      chart: {\n        id: \"stargazers\",\n        zoom: {\n          autoScaleYaxis: (this.props.repos.length > 1 ? false : true), \n        },\n      },\n      xaxis: {\n        type: \"datetime\"\n      },\n      tooltip: {\n        x: {\n          format: \"dd MMM yyyy\",\n        },\n      },\n      colors: repos.map( (repoData) => {\n          return repoData.color\n        })\n    }\n\n    return (\n      <Container className=\"mt-5 mb-5\">\n        <ReactApexChart \n          options={chartOptions} \n          series={chartSeries} \n          type=\"line\" \n        />\n      </Container>\n    )\n  }\n}\n\nexport default ChartContainer","import React from 'react'\nimport { Table, Container } from 'react-bootstrap/'\nimport './StatsTable.css'\n\nclass StatsTable extends React.Component {\n\n  render() {\n    return (\n      <Container className=\"StatsTable-topContainer\">\n        <h3>Repo stats:</h3>\n        <Table bordered responsive hover>\n          <thead>\n            <tr className=\"StatsTable-header\">\n              <th/>\n              { Object.keys(this.props.repos[0].stats).map( statName => \n                <th>{statName}</th> \n              )}\n            </tr>\n          </thead>\n          <tbody>\n            { this.props.repos.map( repoData => \n              <tr className=\"StatsTable-row\" style={{backgroundColor: repoData.color}}>\n                <th>{repoData.username + \" / \" + repoData.repo}</th>\n                { Object.values(repoData.stats).map( statData => \n                  <th>{statData}</th>\n                )}\n              </tr>\n            )}\n\n          </tbody>\n        </Table>\n      </Container>\n    )\n  }\n}\n\nexport default StatsTable","import React from 'react'\nimport { InputGroup, FormControl, Button, OverlayTrigger, Tooltip } from 'react-bootstrap/'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\n\nconst repoUrlParam = \"r={user},{repo}\"\nconst baseUrl = window.location.origin + window.location.pathname + \"#/preload?\";\n\nclass UrlDisplay extends React.Component {\n\n  constructor() {\n    super();\n    this.urlInput = React.createRef();\n  }\n\n  buildURL() {\n    return baseUrl + \n      this.props.repos.map(repoDetails => \n        repoUrlParam.replace(\"{user}\", repoDetails.username).replace(\"{repo}\", repoDetails.repo)\n        )\n        .join(\"&\")\n  }\n\n  copyToClipboard(event) {\n    this.urlInput.current.select();\n    document.execCommand(\"copy\");\n  }\n\n  render() {\n    let url = this.buildURL();\n    return (\n      <InputGroup className=\"mb-3 mt-5\">\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"url\">URL</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          readOnly\n          aria-label=\"URL\"\n          value={url}\n          ref={this.urlInput}\n        />\n        <InputGroup.Append>\n          <OverlayTrigger\n            placement=\"right\"\n            delay={{ show: 250 }}\n            overlay={<Tooltip>Copy URL</Tooltip>}\n          >\n            <Button variant=\"outline-secondary\" onClick={this.copyToClipboard.bind(this)}>\n              <FontAwesomeIcon icon={faCopy} />\n            </Button>\n          </OverlayTrigger>\n          </InputGroup.Append>\n      </InputGroup>\n    )\n  }\n}\n\nexport default UrlDisplay","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { Badge, Button } from 'react-bootstrap/'\n\nclass ClosableBadge extends React.Component {\n\n  handleBadgeClose() {\n    this.props.onBadgeClose(this.props.badgeCookieData)\n  }\n\n  render() {\n    return (\n      <h5>\n        <Badge pill variant=\"primary\" style={{backgroundColor: this.props.color}}>\n          {this.props.text}\n          <Button size=\"sm\" onClick={this.handleBadgeClose.bind(this)} style={{backgroundColor: this.props.color, borderColor: this.props.color}}>\n            <FontAwesomeIcon icon={faTimesCircle} />\n           </Button>\n        </Badge>\n      </h5>\n    )\n\n  }\n}\n\nexport default ClosableBadge","import React from 'react'\nimport { Navbar, Nav } from 'react-bootstrap/'\nimport GitHubButton from 'react-github-btn'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub, faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\n\n\nconst starTrackGitHubRepo = \"https://github.com/seladb/startrack-js\"\nconst seladbGitHubUser = \"https://github.com/seladb\"\nconst seladbTwitter = \"https://twitter.com/seladb\"\nconst seladbEmail = \"mailto:pcapplusplus@gmail.com\"\n\nclass Footer extends React.Component {\n\n  render() {\n    let footerPosition = this.props.pageEmpty ? \"fixed-bottom\" : \"\";\n    return (\n      <Navbar bg=\"light\" sticky=\"bottom\" className={footerPosition}>\n        <Navbar.Text className=\"mr-2\">Created by</Navbar.Text>\n        <GitHubButton href={seladbGitHubUser} data-size=\"large\" aria-label=\"@seladb\">@seladb</GitHubButton>\n        <Navbar.Text className=\"ml-2 mr-2\">Give us a star:</Navbar.Text>\n        <GitHubButton \n          href={starTrackGitHubRepo} \n          data-icon=\"octicon-star\" \n          data-size=\"large\" \n          data-show-count=\"true\" \n          aria-label=\"Star StarTrack on GitHub\"\n        >Star</GitHubButton>\n        <Nav className=\"mr-auto\"/>\n        <Nav>\n          <Nav.Link href={seladbGitHubUser} target=\"_blank\" rel=\"noopener noreferrer\">\n            <FontAwesomeIcon icon={faGithub} className=\"mr-1\"/>\n          </Nav.Link>\n          <Nav.Link href={seladbTwitter} target=\"_blank\" rel=\"noopener noreferrer\">\n            <FontAwesomeIcon icon={faTwitter} className=\"mr-1\"/>\n          </Nav.Link>\n          <Nav.Link href={seladbEmail} target=\"_blank\" rel=\"noopener noreferrer\">\n            <FontAwesomeIcon icon={faEnvelope} className=\"mr-1\"/>\n          </Nav.Link>\n        </Nav>\n      </Navbar>\n    )\n  }\n}\n\nexport default Footer","const months = [\"JAN\", \"FEB\", \"MAR\",\"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"]\n\nclass StargazerStats {\n\n  calcStats(stargazerData) {\n    let firstStarDate = new Date(stargazerData[0].x);\n    let lastStarDate = new Date(stargazerData[stargazerData.length-1].x);\n    let numOfDays = Math.floor((new Date(lastStarDate - firstStarDate))/1000/60/60/24);\n\n    let daysWithoutStars = 0;\n    let maxStarsPerDay = 0;\n    let dayWithMostStars = stargazerData[0].x;\n    let curSameDays = 1;\n    let startDate = Math.floor(new Date(0)/1000/60/60/24);\n    let prevDate = startDate;\n    stargazerData.forEach(xyData => {\n      let curDate = Math.floor(new Date(xyData.x)/1000/60/60/24);\n  \n      if (curDate === prevDate) {\n        curSameDays += 1;\n      }\n      else {\n        if (prevDate !== startDate) {\n          daysWithoutStars += curDate - prevDate - 1;\n        }\n  \n        if (curSameDays > maxStarsPerDay) {\n          maxStarsPerDay = curSameDays;\n          dayWithMostStars = new Date(xyData.x);\n        }\n  \n        curSameDays = 1;\n      }\n  \n      prevDate = curDate;\n    });\n\n    return {\n      'Number of stars': stargazerData.length,\n      'Number of days': numOfDays,\n      'Average stars per day': (stargazerData.length / numOfDays).toFixed(3),\n      'Average days per star': (numOfDays / stargazerData.length).toFixed(3),\n      'Days with stars': numOfDays - daysWithoutStars,\n      'Max stars in one day': maxStarsPerDay,\n      'Day with most stars': this._formatDate(dayWithMostStars)\n    }\n  }\n\n  _formatDate(date) {\n    return date.getDate() + \"-\" + months[date.getMonth()] + \"-\" + date.getFullYear()\n  }\n}\n\nconst stargazerStats = new StargazerStats();\nObject.freeze(stargazerStats);\n\nexport default stargazerStats;","import gitHubUtils from './GitHubUtils'\nimport stargazerStats from './StargazerStats'\n\nconst colors = [ '#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0', '#F86624', '#00B1F2', '#5A2A27' ]\n\nexport const maxReposAllowed = 8;\n\nclass StargazerLoader {\n  static colorIndex = -1\n\n  async loadStargazers(username, repo, handleProgress, shouldStop) {\n    let stargazerData = await gitHubUtils.loadStargazers(username, repo, handleProgress, shouldStop);\n    if (stargazerData === null) {\n      return null;\n    }\n    StargazerLoader.colorIndex = (StargazerLoader.colorIndex + 1 === colors.length ? 0 : StargazerLoader.colorIndex + 1);\n    return {\n      username: username,\n      repo: repo,\n      color: colors[StargazerLoader.colorIndex],\n      stargazerData: stargazerData,\n      stats: stargazerStats.calcStats(stargazerData)\n    }\n  }\n}\n\nconst stargazerLoader = new StargazerLoader();\nObject.freeze(stargazerLoader);\n\nexport default stargazerLoader\n\n\n","import React from 'react'\nimport { Button, Modal, ProgressBar, Container, Row } from 'react-bootstrap/'\nimport './MainContainer.css'\nimport RepoDetails from './RepoDetails'\nimport ChartContainer from './ChartContainer'\nimport StatsTable from './StatsTable'\nimport UrlDisplay from './UrlDisplay'\nimport ClosableBadge from '../shared/ClosableBadge'\nimport Footer from './Footer'\nimport stargazerLoader, { maxReposAllowed } from '../utils/StargazerLoader'\n\nclass MainContainer extends React.Component {\n\n  state = {\n    repos: (this.props.preloadedRepos ? this.props.preloadedRepos : []),\n    alert: {\n      show: false,\n      title: \"\",\n      message: \"\"\n    },\n    loading: {\n      isLoading: false,\n      loadProgress: 0,\n      stopLoading: false\n    }\n  }\n\n  async getRepoStargazers(username, repo) {\n    if (!username || username === \"\" || !repo || repo === \"\") {\n      this.showAlert(\"Missing details\", \"Please provide both Username and Repo name\");\n      return;\n    }\n\n    if (this.state.repos.find(repoIter => repoIter.username === username && repoIter.repo === repo) !== undefined) {\n      this.showAlert(\"Repo exists\", \"Repo already exists\");\n      return;\n    }\n\n    if (this.state.repos.length + 1 > maxReposAllowed) {\n      this.showAlert(\"Reached max number of repos allowed\", \"Maximum repos that can be shown at the same time is \" + maxReposAllowed);\n      return;\n    }\n\n    try {\n      let stargazerData = await stargazerLoader.loadStargazers(\n        username, \n        repo, \n        this.onLoadInProgress.bind(this),\n        () => this.state.loading.stopLoading);\n      this.setState(prevState => ({\n        repos: (stargazerData !== null ? [...prevState.repos, stargazerData] : prevState.repos),\n        loading: {\n          isLoading: false,\n          loadProgress: 0,\n          stopLoading: false\n        }\n      }))\n    }\n    catch(error) {\n      this.showAlert(\"Error loading stargazers\", error.message);\n      this.setState({\n        loading: {\n          isLoading: false,\n          loadProgress: 0\n        }\n      })\n    }\n  }\n\n  showAlert(title, message) {\n    this.setState({\n      alert: {\n        show: true,\n        title: title,\n        message: message\n      }\n    })\n  }\n\n  closeAlert() {\n    this.setState({\n      alert: {\n        show: false,\n        title: \"\",\n        message: \"\"\n      }\n    })\n  }\n\n  onLoadInProgress(progress) {\n    this.setState({\n      loading: {\n        isLoading: true,\n        loadProgress: progress,\n        stopLoading: this.state.loading.stopLoading\n      }\n    })\n  }\n\n  handleStopLoading() {\n    this.setState({\n      loading: {\n        stopLoading: true,\n      }\n    })\n  }\n\n  handleRemoveRepo(repoDetails) {\n    this.setState({\n      repos: this.state.repos.filter( repo => {\n        return repo.username !== repoDetails.username || repo.repo !== repoDetails.repo\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        { this.state.loading.isLoading ? <ProgressBar now={this.state.loading.loadProgress} variant=\"success\" animated /> : <div className=\"progress MainContainer-progressBarPlaceholder\"/> }\n        <RepoDetails \n          onRepoDetails={this.getRepoStargazers.bind(this)}\n          loadInProgress={this.state.loading.isLoading}\n          onStopClick={this.handleStopLoading.bind(this)}\n        />\n        <Container>\n          <Row>\n            { this.state.repos.map( repoData => \n              <div className=\"MainContainer-closableBadgeContainer\">\n                <ClosableBadge \n                  text={repoData.username + \"/\" + repoData.repo} \n                  badgeCookieData={{username: repoData.username, repo: repoData.repo}}\n                  onBadgeClose={this.handleRemoveRepo.bind(this)}\n                  color={repoData.color}\n                />\n              </div>\n            )}\n          </Row>\n        </Container>\n        { this.state.repos.length > 0 ? <ChartContainer repos={this.state.repos}/> : null }\n        { this.state.repos.length > 0 ? <Container><StatsTable repos={this.state.repos}/></Container> : null }\n        { this.state.repos.length > 0 ? <Container><UrlDisplay repos={this.state.repos}/></Container> : null }\n        <Footer pageEmpty={this.state.repos.length === 0}/>\n        <Modal show={this.state.alert.show} onHide={this.closeAlert}>\n          <Modal.Header closeButton>\n            <Modal.Title>{this.state.alert.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{this.state.alert.message}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={this.closeAlert.bind(this)}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default MainContainer","import React from 'react'\nimport TopNav from './TopNav'\nimport MainContainer from './MainContainer'\n\nclass MainPage extends React.Component {\n  render() {\n    return (\n      <div>\n        <TopNav />\n        <MainContainer preloadedRepos={this.props.preloadedRepos} />\n      </div>\n    )\n  }\n}\n\nexport default MainPage","import React from 'react'\nimport { Container, ProgressBar, Button } from 'react-bootstrap/'\nimport './RepoPreloader.css'\nimport stargazerLoader, { maxReposAllowed } from '../utils/StargazerLoader'\nimport MainPage from './MainPage'\n\nclass RepoPreloader extends React.Component {\n\n  reposToPreload = this.parseUrlParams()\n\n  state = {   \n    currentlyLoadingIndex: 0,\n    loadProgress: 0,\n    finishedLoading: false,\n    reposLoaded: [],\n    errors: []\n  }\n\n  parseUrlParams() {\n    let searchParams = new URLSearchParams(this.props.location.search);\n    let result = [];\n    searchParams.forEach( (value, key) => {\n      if (key === \"r\") {\n        let repo = value.split(\",\");\n        if (result.length < maxReposAllowed &&\n            repo.length === 2 && \n            result.find(iter => iter.username === repo[0] && iter.repo === repo[1]) === undefined) {\n          result.push({\n            username: repo[0],\n            repo: repo[1]\n          })\n        }\n      }\n    })\n    return result;\n  }\n\n  componentDidMount() {\n    this.loadStargazers();\n  }\n\n  async loadStargazers() {\n    try {\n      let repoDetails = this.getCurrentlyLoadingRepoDetails();\n      if (Object.keys(repoDetails).length === 0) {\n        this.setState({\n          finishedLoading: true,\n          loadProgress: 100\n        });\n        return\n      }\n      let stargazerData = await stargazerLoader.loadStargazers(repoDetails.username, repoDetails.repo, this.handleLoadProgress.bind(this), () => false);\n      this.setState(prevState => ({\n        currentlyLoadingIndex: this.state.currentlyLoadingIndex + 1,\n        reposLoaded: [...prevState.reposLoaded, stargazerData]\n      }), () => { \n        this.loadStargazers()\n      })\n    }\n    catch(error) {\n      this.setState(prevState => ({\n        currentlyLoadingIndex: this.state.currentlyLoadingIndex + 1,\n        errors: [...prevState.errors, { repoDetails: this.getCurrentlyLoadingRepoDetails(), message: error.message }]\n      }), () => {\n        this.loadStargazers();\n      });\n    }\n  }\n\n  handleLoadProgress(progress) {\n    this.setState({\n      loadProgress: progress\n    })\n  }\n\n  getCurrentlyLoadingRepoDetails() {\n    if (this.state.currentlyLoadingIndex >= this.reposToPreload.length) {\n      return {}\n    }\n\n    return {\n      username: this.reposToPreload[this.state.currentlyLoadingIndex].username,\n      repo: this.reposToPreload[this.state.currentlyLoadingIndex].repo\n    }\n  }\n\n  handleButtonClick() {\n    this.setState({\n      errors: []\n    })\n  }\n\n  getProgressBarVariant() {\n    if (this.state.finishedLoading && this.state.errors.length > 0) {\n      return \"warning\"\n    }\n    \n    return \"success\"\n  }\n\n  getSecondaryHeaderMessage() {\n    if (this.state.finishedLoading && this.state.errors.length > 0) {\n      return \"Error loading repos\"\n    }\n\n    let repoDetails = this.getCurrentlyLoadingRepoDetails();\n    return repoDetails.username + \"/\" + repoDetails.repo;\n  }\n\n  render() {\n    return (\n      <div>\n        { this.state.finishedLoading === false || this.state.errors.length > 0 ? \n          <Container className=\"RepoPreloader-topContainer\">\n            <h3 >Loading Repos Data...</h3>\n            <h5>{this.getSecondaryHeaderMessage()}</h5>\n            <ProgressBar now={this.state.loadProgress} variant={this.getProgressBarVariant()} animated />\n            { this.state.errors.length > 0 ?\n            <Container className=\"RepoPreloader-errorContainer\">\n              {this.state.errors.map(error => <h6><b>Error loading {error.repoDetails.username}/{error.repoDetails.repo}:</b> {error.message}</h6>)}\n              {this.state.finishedLoading ? <Button onClick={this.handleButtonClick.bind(this)}>Continue</Button> : null }\n            </Container>\n            : null }\n          </Container> \n        :\n          <MainPage preloadedRepos={this.state.reposLoaded}/>\n        }\n      </div>\n    )\n  }\n}\n\nexport default RepoPreloader","import React from 'react';\nimport MainPage from './MainPage'\nimport RepoPreloader from './RepoPreloader'\nimport { Route, HashRouter } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Route exact path=\"/\" component={MainPage} />\n      <Route path=\"/preload\" component={RepoPreloader} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}